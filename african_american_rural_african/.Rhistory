taxa_merged_nc <- as.data.frame(t(secom_res_nc$y_hat)) %>% rownames_to_column("Sample") %>%
left_join(meta_log)
res_nc <- my_cor_test(features = cytokines,taxa = rownames(taxa_nc),df = taxa_merged_nc,fdr_method = "BH")
write.table(res_nc, file.path(output_dir_sub,paste0("nc_",prefix,"_Cytokines.txt")),sep = "\t",quote = F,row.names = F)
res_sig_nc <- res_nc %>% arrange(p) %>% filter(p < 0.05)
if(nrow(res_sig_nc)>0)
create_scatterplots(taxa_merged_nc,res_sig_nc,group = "Status",cols = status_cols["nc"],path = output_dir_sub,file_name = paste0("nc_",prefix))
cor_nc <- res_nc %>% dplyr::select(c("var1","var2","cor")) %>% pivot_wider(names_from = "var1",values_from = "cor") %>% column_to_rownames("var2")
hp_nc <- create_heatmap(cor_nc,row_cluster=TRUE, col_cluster=TRUE,heatmap_width=50,heatmap_height=ifelse(t %in% c("Species","Genus"),200,50),
creat_annottaion = FALSE, path = output_dir_sub, file_name=paste0("nc_",prefix))
row_ind <- row_order(hp_nc)
col_ind <- column_order(hp_nc)
# SC
output_dir_sub_sc <- file.path(output_dir_taxa,v,"sc",t)
secom_res_sc <- readRDS(file.path(output_dir_sub_sc,paste0(v,"_sc_",t,"_secom.rds")))
taxa_sc <- secom_res_sc$y_hat
taxa_merged_sc <- as.data.frame(t(secom_res_sc$y_hat)) %>% rownames_to_column("Sample") %>%
left_join(meta_log)
res_sc <- my_cor_test(features = cytokines,taxa = rownames(taxa_sc),df = taxa_merged_sc,fdr_method = "BH")
write.table(res_sc, file.path(output_dir_sub,paste0("sc_",prefix,"_Cytokines.txt")),sep = "\t",quote = F,row.names = F)
res_sig_sc <- res_sc %>% arrange(p) %>% filter(p < 0.05)
if(nrow(res_sig_sc)>0)
create_scatterplots(taxa_merged_sc,res_sig_sc,group = "Status",cols = status_cols["sc"],path = output_dir_sub,file_name = paste0("sc_",prefix))
cor_sc <- res_sc %>% dplyr::select(c("var1","var2","cor")) %>% pivot_wider(names_from = "var1",values_from = "cor") %>% column_to_rownames("var2")
cor_sc <- cor_sc[rownames(cor_nc)[row_ind],colnames(cor_nc)[col_ind]]
hp_sc <- create_heatmap(cor_sc,row_cluster=FALSE, col_cluster=FALSE,heatmap_width=50,heatmap_height=ifelse(t %in% c("Species","Genus"),200,50),
creat_annottaion = FALSE, path = output_dir_sub, file_name=paste0("sc_",prefix))
# Fisher test
colnames(res_nc)[3:6] <- paste0(colnames(res_nc)[3:6],"_nc")
colnames(res_sc)[3:6] <- paste0(colnames(res_sc)[3:6],"_sc")
res_merged <- full_join(res_nc,res_sc) %>%
filter(!is.na(cor_nc) & !is.na(cor_sc)) %>%
filter(num_obs_nc >= 10 & num_obs_sc >= 10) %>%
filter(p_nc < 0.05 | p_sc < 0.05) %>%
filter(abs(cor_nc) > 0.3 | abs(cor_sc) > 0.3)
fisher_res <- apply(res_merged,1,function(x){
df_tmp_nc <- data.frame(cytokine = taxa_merged_nc[,x[["var1"]]], taxa = taxa_merged_nc[,x[["var2"]]])
df_tmp_sc <- data.frame(cytokine = taxa_merged_sc[,x[["var1"]]], taxa = taxa_merged_sc[,x[["var2"]]])
df_tmp_merged <- rbind(df_tmp_nc,df_tmp_sc)
df_tmp_merged $Status <- c(rep("nc",nrow(df_tmp_nc)), rep("sc",nrow(df_tmp_sc)))
# Linear model
test_ml <- summary(lm(taxa ~ cytokine * Status, data = df_tmp_merged))
# Perform fisher test
test <- cocor::cocor(~ cytokine + taxa | cytokine + taxa, data = list(df_tmp_nc,df_tmp_sc))
return(data.frame(var1 = x[["var1"]], var2 = x[["var2"]],
Fisher_p = test@fisher1925$p.value,
l_CI = test@zou2007$conf.int[1],
U_CI = test@zou2007$conf.int[2],
p_lm = test_ml$coefficients[4,4]))
})
fisher_res_df <- fisher_res %>% bind_rows() %>% mutate(lfdr = fdrtool(Fisher_p,statistic = "pvalue")$lfdr) %>%
mutate(q = p.adjust(Fisher_p, method = "BH"))
# Merge all results and save
merge_all <- full_join(res_nc,res_sc) %>% full_join(fisher_res_df) %>% arrange(Fisher_p) %>% mutate(diff_cor = abs(cor_nc - cor_sc))
write.table(merge_all, file.path(output_dir_sub,paste0("Cytokines_",t,"_","correlation_Fisher.txt")),row.names = F,quote = F,sep = "\t")
merge_all_sig <- merge_all %>% filter(Fisher_p < 0.05)
if(nrow(merge_all_sig)>0){
plots <- lapply(1:nrow(merge_all_sig), function(x){
amr = merge_all_sig$var1[x]
taxa = merge_all_sig$var2[x]
p1 <- ggplot(taxa_merged_nc,aes(x = .data[[amr]],y = .data[[taxa]]))+
geom_point(aes(color = .data[["Status"]])) +
scale_color_manual(values = status_cols[1])+
geom_smooth(method = "lm",color = "darkgray" , alpha = 0.1)+
theme_classic()+
labs(caption = paste0("r = ",signif(merge_all_sig$cor_nc[x],3),
"\np = ", signif(merge_all_sig$p_nc[x],3),
"\nq = ", signif(merge_all_sig$adjp_nc[x],3)))
p2 <- ggplot(taxa_merged_sc,aes(x = .data[[amr]],y = .data[[taxa]]))+
geom_point(aes(color = .data[["Status"]])) +
scale_color_manual(values = status_cols[2])+
geom_smooth(method = "lm",color = "darkgray" , alpha = 0.1)+
theme_classic()+
labs(caption = paste0("r = ",signif(merge_all_sig$cor_sc[x],3),
"\np = ", signif(merge_all_sig$p_sc[x],3),
"\nq = ", signif(merge_all_sig$adjp_sc[x],3)))
p <- ggarrange(p1,p2,nrow = 1)
p<-  annotate_figure(p,top = text_grob(paste0("Fisher'z test\np = ",signif(merge_all_sig$Fisher_p[x],3), "; q = ",signif(merge_all_sig$q[[x]],3)),
color = "darkgreen", face = "bold", size = 14))
})
# Save the plots
pdf(file.path(output_dir_sub,paste0("Cytokines_",t,"_","Fisher_significant.pdf")),11,5)
print(ggarrange(plotlist = plots,nrow = 1,ncol = 1))
dev.off()
}
}
}
library(cooccur)
data(finches)
cooccur.finches <- cooccur(mat=finches,
type="spp_site",
thresh=TRUE,
spp_names=TRUE)
summary(cooccur.finches)
plot(cooccur.finches)
View(cooccur.finches$results)
output_dir <-"Outputs/Gut/Metabolomics_Differential_Abundance"
dir.create(output_dir,showWarnings = F,recursive = T)
mode="positive"
dt="metabolomics"
# Load metabolomics data
df_met <- readxl::read_excel(paste0("data/metabolomics/stool/CPLC02082301_",mode," data_377 feces.xlsx"),sheet = 3)
df_met <- df_met[df_met$`Delta(ppm)` < 5,]
df_sub <- df_met[,c(which(colnames(df_met)=="Compound_name"),which(colnames(df_met)=="1"):ncol(df_met))]
df_sub <- df_sub %>% column_to_rownames("Compound_name")
View(df_sub)
View(df_sub)
# Load libraries
library(phyloseq)
library(microbiome)
library(tidyverse)
library(ggpubr)
library("SmartEDA")
library(gridExtra)
library(vegan)
library(rstatix)
library(qiime2R)
install.packages("qiime2R")
devtools::install_github("jbisanz/qiime2R")
library(qiime2R)
library(ANCOMBC)
# Functions
get_upper_tri = function(cormat){
cormat[lower.tri(cormat)] = NA
diag(cormat) = NA
return(cormat)
}
setwd("~/Documents/codes/Rebecca_code")
#import ASV frequency file (filtered in qiime)
ASV <- read_qza("/Users/mindelrn/Documents/Microbiome_Analysis_Data/r_data/feature-table-hab-se-sputum.qza") #filtered frequency table
#import ASV frequency file (filtered in qiime)
ASV <- read_qza("feature-table-hab-se-sputum.qza") #filtered frequency table
View(ASV)
names(asv)
names(ASV)
#import sputum_metadata
metadata <- read.table("metadata_sputum.txt", , sep='\t', header=T, row.names=1, comment="")
#import sputum_metadata
metadata <- read.table("metadata_sputum.txt", , sep='\t', header=T, row.names=1, comment="")
View(metadata)
metadata <- metadata[-1,] #remove row2 which specifies qiime data type
#import rooted phylogenetic tree
tree <- read_qza("raxml-cat-bootstrap-tree-rooted-sputum.qza")
#import taxonomy
taxonomy <- read_qza("taxonomy-hab-se-sputum.qza")
View(taxonomy)
View(taxonomy$data)
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
View(tax_table)
dim(taxonomy$data)
dim(tax_table)
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy$data$Feature.ID
View(ASV$data)
#create phyloseq object
physeq <- phyloseq(
otu_table(ASV$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
physeq
#create phyloseq object
physeq <- phyloseq(
otu_table(ASV$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
#summarize physeq
summarize_phyloseq(physeq)
summary(sample_sums(physeq))
#plot taxa prevalence in all samples, on the phylum level
plot_taxa_prevalence(physeq, "Phylum")
# Retrieve data from the phyloseq object
otu_table <- as.data.frame(abundances(physeq))
tax_table0 <- as.data.frame(tax_table(physeq))
metadata0 <- meta(physeq)
# Sanity check
all.equal(colnames(otu_table),rownames(metadata0))
all.equal(rownames(otu_table),rownames(tax_table0))
#create phylum level
phylum_phy <- aggregate_taxa(physeq, level = "Phylum")
readnumber <-readcount(physeq)
hist(readnumber)
range(readnumber)
#set colors
mycolors <- c("#919191", "#FFA000", "#FF6F00", "#C5E1A5", "#7CB342", "#1B5E20")
phy_sub1 <- subset_samples(physeq = physeq, TLR5 %in% c(1,2,3,4))
diff_out1 <- ancombc2(
data = phy_sub1, assay_name = "counts", tax_level = "Genus",
fix_formula = NULL, rand_formula = NULL,
p_adj_method = "BH", pseudo_sens = TRUE,
prv_cut = 0.0001, lib_cut = 0, s0_perc = 0.05,
group = "TLR5", struc_zero = TRUE, neg_lb = TRUE,
alpha = 0.05, n_cl = 2, verbose = TRUE
)
View(metadata0)
diff_out1 <- ancombc2(
data = phy_sub1, assay_name = "counts", tax_level = "Genus",
fix_formula = "TLR5", rand_formula = NULL,
p_adj_method = "BH", pseudo_sens = TRUE,
prv_cut = 0.0001, lib_cut = 0, s0_perc = 0.05,
group = "TLR5", struc_zero = TRUE, neg_lb = TRUE,
alpha = 0.05, n_cl = 2, verbose = TRUE
)
View(taxonomy$data)
tax_table <- taxonomy$data %>% separate(Taxon,into = c("Kingdom","Phylum","Class","Order","Family","Genus","Species"))
View(tax_table)
tax_table <- taxonomy$data %>% separate(Taxon,into = c("Kingdom","Phylum","Class","Order","Family","Genus","Species"),sep = ";")
tax_table <- taxonomy$data %>% separate(Taxon,into = c("Kingdom","Phylum","Class","Order","Family","Genus","Species"),sep = ";") %>%
column_to_rownames("Feature.ID")
#create phyloseq object
physeq <- phyloseq(
otu_table(ASV$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
#import taxonomy
taxonomy <- read_qza("taxonomy-hab-se-sputum.qza")
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy$data$Feature.ID
class(tax_table)
#import taxonomy
taxonomy <- read_qza("taxonomy-hab-se-sputum.qza")
tax_table <- taxonomy$data %>% separate(Taxon,into = c("Kingdom","Phylum","Class","Order","Family","Genus","Species"),sep = ";") %>%
column_to_rownames("Feature.ID")
class(tax_table)
#import taxonomy
taxonomy <- read_qza("taxonomy-hab-se-sputum.qza")
tax_table <- taxonomy$data %>% separate(Taxon,into = c("Kingdom","Phylum","Class","Order","Family","Genus","Species"),sep = ";") %>%
column_to_rownames("Feature.ID") %>% as.matrix()
#create phyloseq object
physeq <- phyloseq(
otu_table(ASV$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
#summarize physeq
summarize_phyloseq(physeq)
summary(sample_sums(physeq))
#plot taxa prevalence in all samples, on the phylum level
plot_taxa_prevalence(physeq, "Phylum")
# Retrieve data from the phyloseq object
otu_table <- as.data.frame(abundances(physeq))
tax_table0 <- as.data.frame(tax_table(physeq))
metadata0 <- meta(physeq)
# Sanity check
all.equal(colnames(otu_table),rownames(metadata0))
all.equal(rownames(otu_table),rownames(tax_table0))
#create phylum level
phylum_phy <- aggregate_taxa(physeq, level = "Phylum")
readnumber <-readcount(physeq)
hist(readnumber)
range(readnumber)
phy_sub1 <- subset_samples(physeq = physeq, TLR5 %in% c(1,2,3,4))
diff_out1 <- ancombc2(
data = phy_sub1, assay_name = "counts", tax_level = "Genus",
fix_formula = "TLR5", rand_formula = NULL,
p_adj_method = "BH", pseudo_sens = TRUE,
prv_cut = 0.0001, lib_cut = 0, s0_perc = 0.05,
group = "TLR5", struc_zero = TRUE, neg_lb = TRUE,
alpha = 0.05, n_cl = 2, verbose = TRUE
)
View(diff_out1$bias_correct_log_table)
?ancombc2
diff_out1 <- ancombc2(
data = phy_sub1, assay_name = "counts", tax_level = "Genus",
fix_formula = "TLR5", rand_formula = NULL,
p_adj_method = "BH", pseudo_sens = TRUE,
prv_cut = 0.05, lib_cut = 0, s0_perc = 0.05,
group = "TLR5", struc_zero = TRUE, neg_lb = TRUE,
alpha = 0.05, n_cl = 2, verbose = TRUE
)
View(diff_out1$feature_table)
dim(diff_out1$feature_table)
dim(diff_out1$bias_correct_log_table)
tax_table <- taxonomy$data %>% separate(Taxon,into = c("Kingdom","Phylum","Class","Order","Family","Genus","Species"),sep = ";") %>%
column_to_rownames("Feature.ID") %>% as.matrix()
tax_table[is.na(tax_table)] <- "Not_classified"
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
#import taxonomy
taxonomy <- read_qza("taxonomy-hab-se-sputum.qza")
tax_table <- taxonomy$data %>% separate(Taxon,into = c("Kingdom","Phylum","Class","Order","Family","Genus","Species"),sep = ";") %>%
column_to_rownames("Feature.ID") %>% as.matrix()
tax_table[is.na(tax_table)] <- "Not_classified"
#create phyloseq object
physeq <- phyloseq(
otu_table(ASV$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
phy_sub1 <- subset_samples(physeq = physeq, TLR5 %in% c(1,2,3,4))
diff_out1 <- ancombc2(
data = phy_sub1, assay_name = "counts", tax_level = "Genus",
fix_formula = "TLR5", rand_formula = NULL,
p_adj_method = "BH", pseudo_sens = TRUE,
prv_cut = 0.05, lib_cut = 0, s0_perc = 0.05,
group = "TLR5", struc_zero = TRUE, neg_lb = TRUE,
alpha = 0.05, n_cl = 2, verbose = TRUE
)
View(diff_out1$bias_correct_log_table
)
#import taxonomy
taxonomy <- read_qza("taxonomy-hab-se-sputum.qza")
tax_table <- do.call(rbind, strsplit(as.character(taxonomy$data$Taxon), "; "))
colnames(tax_table) <- c("Kingdom","Phylum","Class","Order","Family","Genus","Species")
rownames(tax_table) <- taxonomy$data$Feature.ID
#create phyloseq object
physeq <- phyloseq(
otu_table(ASV$data, taxa_are_rows = T),
phy_tree(tree$data),
tax_table(tax_table),
sample_data(metadata)
)
diff_out1 <- ancombc2(
data = phy_sub1, assay_name = "counts", tax_level = "Genus",
fix_formula = "TLR5", rand_formula = NULL,
p_adj_method = "BH", pseudo_sens = TRUE,
prv_cut = 0.05, lib_cut = 0, s0_perc = 0.05,
group = "TLR5", struc_zero = TRUE, neg_lb = TRUE,
alpha = 0.05, n_cl = 2, verbose = TRUE
)
View(diff_out1$bias_correct_log_table)
View(diff_out1$feature_table)
View(tax_table)
source("~/Documents/codes/Rebecca_code/1.load.R")
setwd("~/Documents/codes/Microbiome_Tutorials/african_american_rural_african")
source("~/Documents/codes/Microbiome_Tutorials/african_american_rural_african/code/01.load.R")
source("~/Documents/codes/Microbiome_Tutorials/african_american_rural_african/code/02.import_data.R")
source("~/Documents/codes/Microbiome_Tutorials/african_american_rural_african/code/03.alpha_diversity.R")
# Create output directory
output_dir <- "Outputs/Differential_Abundance"
dir.create(output_dir, recursive = T, showWarnings = F)
# Subset to baseline
phy_sub1 <- subset_samples(dietswap, diet == "ED1")
diff_out1 <- ancombc2(
data = phy_sub1, assay_name = "counts", tax_level = "Genus",
fix_formula = "nationality + sex + bmi_group", rand_formula = NULL,
p_adj_method = "BH", pseudo_sens = TRUE,
prv_cut = 0.15, lib_cut = 1000, s0_perc = 0.05,
group = "nationality", struc_zero = TRUE, neg_lb = TRUE,
alpha = 0.05, n_cl = 2, verbose = TRUE
)
# Bias corrected abundances
bias_corrected_df <- diff_out1$bias_correct_log_table
# Replace NAs with the minimum plus half of the minimum (This table will be used for only visualization)
bias_corrected_df <- apply(bias_corrected_df, 2, function(x) {
x[is.na(x)] <- min(x, na.rm = T) + (min(x, na.rm = T) / 2)
return(x)
})
# Structural zeros
zero_df <- diff_out1$zero_ind
sig_taxa_with_st_zero <- zero_df$taxon[zero_df %>%
column_to_rownames("taxon") %>%
rowSums(.) == 1]
# Extract results
res1 <- diff_out1$res
# Subset to significant taxa and then create new columns for plotting
res1_sig <- res1 %>%
filter(diff_nationalityAFR) %>%
arrange(lfc_nationalityAFR) %>%
mutate(
taxon = factor(taxon, levels = unique(taxon)),
change = ifelse(lfc_nationalityAFR < 0, "negative_lfc", "positive_lfc"),
p_sig = ifelse(q_nationalityAFR < 0.001, "***", ifelse(q_nationalityAFR < 0.01, "**", "*")),
y_p = ifelse(lfc_nationalityAFR > 0, lfc_nationalityAFR + 0.2, lfc_nationalityAFR - 0.2),
ss_test = ifelse(passed_ss_nationalityAFR, "aquamarine3", "black")
)
# lfc Plot
res1_fig <- ggplot(res1_sig, aes(x = taxon, y = lfc_nationalityAFR, fill = change)) +
geom_bar(stat = "identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, color = res1_sig$ss_test,size = 5)) +
scale_fill_manual(values = c("blue", "red")) +
geom_text(aes(y = y_p, label = p_sig)) +
labs(x = "")
res1_fig
outputs_list <- list()
for (nt in c("AAM", "AFR")) {
# Subset to nationality
phy_sub <- subset_samples(dietswap, nationality == nt)
diff_out2 <- ancombc2(
data = phy_sub, assay_name = "counts", tax_level = "Genus",
fix_formula = "diet + sex + bmi_group", rand_formula = "(1|subject)",
p_adj_method = "BH", pseudo_sens = TRUE,
prv_cut = 0.15, lib_cut = 1000, s0_perc = 0.05,
group = "diet", struc_zero = TRUE, neg_lb = TRUE,
global = TRUE, pairwise = TRUE, dunnet = TRUE, trend = TRUE,
alpha = 0.05, n_cl = 2, verbose = TRUE,
trend_control = list(
contrast = list(
matrix(c(1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, -1, 1), # Increasing trend
nrow = 5,
byrow = TRUE
),
matrix(c(-1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 1, -1), # decreasing trend
nrow = 5,
byrow = TRUE
)
),
node = list(5, 5),
solver = "ECOS",
B = 10 # Increase for real data
)
)
outputs_list[[nt]] <- diff_out2
}
#saveRDS(outputs_list,file = file.path(output_dir,"ancombc2_outputs.rds"))
outputs_list <- readRDS(file.path(output_dir,"ancombc2_outputs.rds"))
# Bias corrected abundance
bias_corrected_df <- outputs_list[["AAM"]]$bias_correct_log_table %>%
rownames_to_column("taxon") %>%
dplyr::full_join(outputs_list[["AFR"]]$bias_correct_log_table %>% rownames_to_column("taxon")) %>%
column_to_rownames("taxon")
# Primary results
res1 <- rbind(outputs_list[["AAM"]]$res, outputs_list[["AFR"]]$res) %>%
mutate(nationality = c(rep("AAM", nrow(outputs_list[["AAM"]]$res)), rep("AFR", nrow(outputs_list[["AFR"]]$res))))
# Dunnet results
dunn_results <- rbind(outputs_list[["AAM"]]$res_dunn, outputs_list[["AFR"]]$res_dunn) %>%
mutate(nationality = c(rep("AAM", nrow(outputs_list[["AAM"]]$res_dunn)), rep("AFR", nrow(outputs_list[["AFR"]]$res_dunn))))
# Trend results
trend_results <- rbind(outputs_list[["AAM"]]$res_trend, outputs_list[["AFR"]]$res_trend) %>%
mutate(nationality = c(rep("AAM", nrow(outputs_list[["AAM"]]$res_trend)), rep("AFR", nrow(outputs_list[["AFR"]]$res_trend))))
dunn_sig <- dunn_results %>%
filter(diff_dietHE1 | diff_dietHE2 | diff_dietDI1 | diff_dietDI2 | diff_dietED2)
View(dunn_sig)
dunn_sig <- dunn_results %>%
filter(diff_dietHE1 | diff_dietHE2 | diff_dietDI1 | diff_dietDI2 | diff_dietED2) %>%
pivot_longer(
cols = !c(taxon, nationality),
cols_vary = "slowest",
names_to = c(".value", "Diet"),
names_pattern = "(.*)_(.*)"
)
dunn_sig <- dunn_results %>%
filter(diff_dietHE1 | diff_dietHE2 | diff_dietDI1 | diff_dietDI2 | diff_dietED2)
View(dunn_sig)
# Subset to significant taxa and then create new columns for plotting
dunn_sig <- dunn_results %>%
filter(diff_dietHE1 | diff_dietHE2 | diff_dietDI1 | diff_dietDI2 | diff_dietED2) %>%
pivot_longer(
cols = !c(taxon, nationality),
cols_vary = "slowest",
names_to = c(".value", "Diet"),
names_pattern = "(.*)_(.*)"
) %>%
mutate(p_sig = ifelse(q < 0.001, "***", ifelse(q < 0.01, "**", ifelse(q < 0.05, "*", "ns")))) %>%
mutate_if(is.numeric, function(x) round(x, 2)) %>%
mutate(
label = ifelse(p_sig != "ns", paste0(lfc, "\n", p_sig), lfc),
Diet = factor(gsub("diet", "", Diet), levels = c("HE1", "HE2", "DI1", "DI2", "ED2"))
)
# Heatmap of lfc
dunn_fig <- ggplot(dunn_sig, aes(y = taxon, x = Diet, fill = lfc)) +
geom_tile(color = "black") +
geom_text(aes(label = label), color = "black", size = 3) +
labs(x = NULL, y = NULL, title = "Log fold changes from baseline") +
theme_minimal() +
scale_fill_gradient2(
low = "blue", high = "red", mid = "white",
na.value = "white", midpoint = 0, limit = c(-max(abs(dunn_sig$lfc)), max(abs(dunn_sig$lfc))),
name = "LFC"
) +
theme(plot.title = element_text(hjust = 0.5, face = "bold")) +
facet_wrap(~nationality, scales = "free")
dunn_fig
ggplot(dunn_sig, aes(y = taxon, x = Diet, fill = lfc)) +
geom_tile(color = "black")
ggplot(dunn_sig, aes(y = taxon, x = Diet, fill = lfc)) +
geom_tile(color = "black") +
geom_text(aes(label = label), color = "black", size = 3)
dev.off()
dev.off()
View(res1)
sample_data(phy_sub)$Diet
View(sample_data(phy_sub))
meta=sample_data(phy_sub)
meta$diet
View(diff_out2$res_pair)
matrix(c(1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, -1, 1), # Increasing trend
nrow = 5,
byrow = TRUE
)
matrix(c(-1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 1, -1), # decreasing trend
nrow = 5,
byrow = TRUE
)
# Primary results
res1 <- rbind(outputs_list[["AAM"]]$res, outputs_list[["AFR"]]$res) %>%
mutate(nationality = c(rep("AAM", nrow(outputs_list[["AAM"]]$res)), rep("AFR", nrow(outputs_list[["AFR"]]$res))))
# Dunnet results
dunn_results <- rbind(outputs_list[["AAM"]]$res_dunn, outputs_list[["AFR"]]$res_dunn) %>%
mutate(nationality = c(rep("AAM", nrow(outputs_list[["AAM"]]$res_dunn)), rep("AFR", nrow(outputs_list[["AFR"]]$res_dunn))))
View(dunn_results)
# Trend results
trend_results <- rbind(outputs_list[["AAM"]]$res_trend, outputs_list[["AFR"]]$res_trend) %>%
mutate(nationality = c(rep("AAM", nrow(outputs_list[["AAM"]]$res_trend)), rep("AFR", nrow(outputs_list[["AFR"]]$res_trend))))
dunn_sig1 <- dunn_results %>%
filter(diff_dietHE1 | diff_dietHE2 | diff_dietDI1 | diff_dietDI2 | diff_dietED2) %>%
pivot_longer(
cols = !c(taxon, nationality),
cols_vary = "slowest",
names_to = c(".value", "Diet"),
names_pattern = "(.*)_(.*)"
)
View(dunn_sig1)
